const express = require('express');
const path = require('path');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// API endpoint to demonstrate backend functionality
app.get('/api/info', (req, res) => {
    res.json({
        project: 'Revolt Motors Voice Assistant',
        developer: 'Radhika Jangra',
        description: 'A voice-enabled chatbot supporting multiple Indian languages',
        features: [
            'Voice recognition',
            'Text-to-speech',
            'Multi-language support (10 Indian languages)',
            'Real-time chat interface',
            'Responsive design'
        ],
        technology: {
            frontend: 'HTML, CSS, JavaScript',
            backend: 'Node.js, Express',
            apis: 'Web Speech API'
        },
        endpoints: {
            chat: '/api/chat (POST)',
            info: '/api/info (GET)'
        }
    });
});

// Simulated chat endpoint (in a real application, this would connect to AI services)
app.post('/api/chat', (req, res) => {
    const { message, language = 'en' } = req.body;
    
    // Simulate AI processing delay
    setTimeout(() => {
        const responses = {
            en: "I'm the Revolt Motors assistant. How can I help you with our electric bikes today?",
            hi: "рдореИрдВ рд░рд┐рд╡реЛрд▓реНрдЯ рдореЛрдЯрд░реНрд╕ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА рдЗрд▓реЗрдХреНрдЯреНрд░рд┐рдХ рдмрд╛рдЗрдХ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЖрдЬ рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
            ta: "роиро╛ройрпН ро░ро┐ро╡рпЛро▓рпНроЯрпН роорпЛроЯрпНроЯро╛ро░рпНро╕рпН роЙродро╡ро┐ропро╛ро│ро░рпН. роОроЩрпНроХро│рпН рооро┐ройрпНроЪро╛ро░ рокрпИроХрпНроХрпБроХро│рпН роХрпБро▒ро┐родрпНродрпБ роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОро╡рпНро╡ро╛ро▒рпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН?",
            te: "р░ир▒Зр░ир▒Б р░░р░┐р░╡р▒Лр░▓р▒Нр░Яр▒Н р░ор▒Лр░Яр░╛р░░р▒Нр░╕р▒Н р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐. р░ор▒А р░Ор░▓р░Хр▒Нр░Яр▒Нр░░р░┐р░Хр▒Н р░мр▒Ир░Хр▒Нр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░ир▒Зр░ир▒Б р░Ир░░р▒Лр░Ьр▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б?",
            bn: "ржЖржорж┐ Revolt Motors assistantред ржЖржорж╛ржжрзЗрж░ ржЗрж▓рзЗржХржЯрзНрж░рж┐ржХ ржмрж╛ржЗржХ рж╕ржорзНржкрж░рзНржХрзЗ ржЖржЬ ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?"
        };

        res.json({
            success: true,
            response: responses[language] || responses.en,
            language: language,
            timestamp: new Date().toISOString()
        });
    }, 1000);
});

// Serve the main HTML file
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ 
        error: 'Something went wrong!',
        message: err.message 
    });
});

// 404 handler
app.use((req, res) => {
    res.status(404).json({ 
        error: 'Endpoint not found',
        availableEndpoints: {
            home: '/',
            apiInfo: '/api/info',
            chat: '/api/chat (POST)'
        }
    });
});

// Start server
app.listen(PORT, () => {
    console.log(`ЁЯЪА Revolt Motors Voice Assistant server running on port ${PORT}`);
    console.log(`ЁЯУН Local: http://localhost:${PORT}`);
    console.log(`ЁЯдЦ API Info: http://localhost:3000/api/info`);
    console.log(`ЁЯТм Chat endpoint: http://localhost:3000/api/chat`);
    console.log(`ЁЯСитАНЁЯТ╗ Developer: Radhika Jangra`);
});
